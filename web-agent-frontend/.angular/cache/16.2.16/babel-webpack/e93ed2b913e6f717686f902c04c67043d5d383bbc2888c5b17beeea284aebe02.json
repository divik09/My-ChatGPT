{"ast":null,"code":"import _asyncToGenerator from \"D:/AI workspace/Agentic_demo/web-agent-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ChatService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8000';\n  }\n  sendMessage(question) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const request = {\n          question\n        };\n        const response = yield firstValueFrom(_this.http.post(`${_this.apiUrl}/search`, request));\n        return response.answer;\n      } catch (error) {\n        console.error('Error sending message:', error);\n        throw new Error('Failed to send message to web agent');\n      }\n    })();\n  }\n  checkConnection() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield firstValueFrom(_this2.http.get(`${_this2.apiUrl}/`));\n        return true;\n      } catch (error) {\n        console.error('Web agent API is not available:', error);\n        return false;\n      }\n    })();\n  }\n  static {\n    this.ɵfac = function ChatService_Factory(t) {\n      return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ChatService,\n      factory: ChatService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { ChatService };","map":{"version":3,"names":["firstValueFrom","ChatService","constructor","http","apiUrl","sendMessage","question","_this","_asyncToGenerator","request","response","post","answer","error","console","Error","checkConnection","_this2","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\AI workspace\\Agentic_demo\\web-agent-frontend\\src\\app\\services\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { firstValueFrom } from 'rxjs';\r\n\r\ninterface QueryRequest {\r\n  question: string;\r\n}\r\n\r\ninterface QueryResponse {\r\n  answer: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatService {\r\n  private readonly apiUrl = 'http://localhost:8000';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  async sendMessage(question: string): Promise<string> {\r\n    try {\r\n      const request: QueryRequest = { question };\r\n      const response = await firstValueFrom(\r\n        this.http.post<QueryResponse>(`${this.apiUrl}/search`, request)\r\n      );\r\n      return response.answer;\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      throw new Error('Failed to send message to web agent');\r\n    }\r\n  }\r\n\r\n  async checkConnection(): Promise<boolean> {\r\n    try {\r\n      await firstValueFrom(this.http.get(`${this.apiUrl}/`));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Web agent API is not available:', error);\r\n      return false;\r\n    }\r\n  }\r\n}"],"mappings":";AAEA,SAASA,cAAc,QAAQ,MAAM;;;AAUrC,MAGaC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,MAAM,GAAG,uBAAuB;EAEV;EAEjCC,WAAWA,CAACC,QAAgB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAChC,IAAI;QACF,MAAMC,OAAO,GAAiB;UAAEH;QAAQ,CAAE;QAC1C,MAAMI,QAAQ,SAASV,cAAc,CACnCO,KAAI,CAACJ,IAAI,CAACQ,IAAI,CAAgB,GAAGJ,KAAI,CAACH,MAAM,SAAS,EAAEK,OAAO,CAAC,CAChE;QACD,OAAOC,QAAQ,CAACE,MAAM;OACvB,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,MAAM,IAAIE,KAAK,CAAC,qCAAqC,CAAC;;IACvD;EACH;EAEMC,eAAeA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAT,iBAAA;MACnB,IAAI;QACF,MAAMR,cAAc,CAACiB,MAAI,CAACd,IAAI,CAACe,GAAG,CAAC,GAAGD,MAAI,CAACb,MAAM,GAAG,CAAC,CAAC;QACtD,OAAO,IAAI;OACZ,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD,OAAO,KAAK;;IACb;EACH;;;uBA1BWZ,WAAW,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXrB,WAAW;MAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;SAEPxB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}