{"ast":null,"code":"import _asyncToGenerator from \"D:/AI workspace/Agentic_demo/web-agent-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nlet ChatComponent = class ChatComponent {\n  constructor(chatService) {\n    this.chatService = chatService;\n    this.messages = [];\n    this.currentMessage = '';\n    this.isLoading = false;\n  }\n  ngOnInit() {\n    this.messages.push({\n      content: \"Hello! I'm your Web Agent Assistant. I can search the web and provide you with information on any topic. What would you like to know?\",\n      isUser: false,\n      timestamp: new Date()\n    });\n  }\n  ngAfterViewChecked() {\n    this.scrollToBottom();\n  }\n  onKeyDown(event) {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      this.sendMessage();\n    }\n  }\n  sendMessage() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.currentMessage.trim() || _this.isLoading) return;\n      const userMessage = {\n        content: _this.currentMessage,\n        isUser: true,\n        timestamp: new Date()\n      };\n      _this.messages.push(userMessage);\n      const loadingMessage = {\n        content: '',\n        isUser: false,\n        timestamp: new Date(),\n        isLoading: true\n      };\n      _this.messages.push(loadingMessage);\n      _this.isLoading = true;\n      const question = _this.currentMessage;\n      _this.currentMessage = '';\n      try {\n        const response = yield _this.chatService.sendMessage(question);\n        const index = _this.messages.indexOf(loadingMessage);\n        if (index !== -1) {\n          _this.messages[index] = {\n            content: response,\n            isUser: false,\n            timestamp: new Date(),\n            isLoading: false\n          };\n        }\n      } catch (error) {\n        const index = _this.messages.indexOf(loadingMessage);\n        if (index !== -1) {\n          _this.messages[index] = {\n            content: 'Sorry, I encountered an error while processing your request. Please try again.',\n            isUser: false,\n            timestamp: new Date(),\n            isLoading: false\n          };\n        }\n      } finally {\n        _this.isLoading = false;\n      }\n    })();\n  }\n  scrollToBottom() {\n    try {\n      this.messagesContainer.nativeElement.scrollTop = this.messagesContainer.nativeElement.scrollHeight;\n    } catch (err) {}\n  }\n};\n__decorate([ViewChild('messagesContainer')], ChatComponent.prototype, \"messagesContainer\", void 0);\nChatComponent = __decorate([Component({\n  selector: 'app-chat',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  template: `\n    <div class=\"chat-container\">\n      <div class=\"chat-header\">\n        <h1>Web Agent Assistant</h1>\n        <p>Ask me anything and I'll search the web for answers</p>\n      </div>\n\n      <div class=\"messages-container\" #messagesContainer>\n{{}}\n        <div *ngFor=\"let message of messages\"\n             class=\"message\"\n             [ngClass]=\"{'user-message': message.isUser, 'agent-message': !message.isUser}\">\n          <div class=\"message-content\">\n            <div class=\"message-text\">\n              <span *ngIf=\"message.isLoading\" class=\"loading-dots\">\n                <span></span><span></span><span></span>\n              </span>\n              <span *ngIf=\"!message.isLoading\">{{ message.content }}</span>\n            </div>\n            <div class=\"message-time\">\n              {{ message.timestamp | date:'short' }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"input-container\">\n        <div class=\"input-wrapper\">\n          <textarea\n            [(ngModel)]=\"currentMessage\"\n            (keydown)=\"onKeyDown($event)\"\n            placeholder=\"Ask me anything...\"\n            class=\"message-input\"\n            [disabled]=\"isLoading\"\n            rows=\"1\"></textarea>\n          <button\n            (click)=\"sendMessage()\"\n            [disabled]=\"!currentMessage.trim() || isLoading\"\n            class=\"send-button\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n              <path d=\"M2 21L23 12L2 3V10L17 12L2 14V21Z\" fill=\"currentColor\"/>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./chat.component.css']\n})], ChatComponent);\nexport { ChatComponent };","map":{"version":3,"names":["Component","ViewChild","CommonModule","FormsModule","ChatComponent","constructor","chatService","messages","currentMessage","isLoading","ngOnInit","push","content","isUser","timestamp","Date","ngAfterViewChecked","scrollToBottom","onKeyDown","event","key","shiftKey","preventDefault","sendMessage","_this","_asyncToGenerator","trim","userMessage","loadingMessage","question","response","index","indexOf","error","messagesContainer","nativeElement","scrollTop","scrollHeight","err","__decorate","selector","standalone","imports","template","styleUrls"],"sources":["D:\\AI workspace\\Agentic_demo\\web-agent-frontend\\src\\app\\chat\\chat.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, AfterViewChecked } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ChatService } from '../services/chat.service';\r\n\r\nexport interface Message {\r\n  content: string;\r\n  isUser: boolean;\r\n  timestamp: Date;\r\n  isLoading?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-chat',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  template: `\r\n    <div class=\"chat-container\">\r\n      <div class=\"chat-header\">\r\n        <h1>Web Agent Assistant</h1>\r\n        <p>Ask me anything and I'll search the web for answers</p>\r\n      </div>\r\n\r\n      <div class=\"messages-container\" #messagesContainer>\r\n{{}}\r\n        <div *ngFor=\"let message of messages\"\r\n             class=\"message\"\r\n             [ngClass]=\"{'user-message': message.isUser, 'agent-message': !message.isUser}\">\r\n          <div class=\"message-content\">\r\n            <div class=\"message-text\">\r\n              <span *ngIf=\"message.isLoading\" class=\"loading-dots\">\r\n                <span></span><span></span><span></span>\r\n              </span>\r\n              <span *ngIf=\"!message.isLoading\">{{ message.content }}</span>\r\n            </div>\r\n            <div class=\"message-time\">\r\n              {{ message.timestamp | date:'short' }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"input-container\">\r\n        <div class=\"input-wrapper\">\r\n          <textarea\r\n            [(ngModel)]=\"currentMessage\"\r\n            (keydown)=\"onKeyDown($event)\"\r\n            placeholder=\"Ask me anything...\"\r\n            class=\"message-input\"\r\n            [disabled]=\"isLoading\"\r\n            rows=\"1\"></textarea>\r\n          <button\r\n            (click)=\"sendMessage()\"\r\n            [disabled]=\"!currentMessage.trim() || isLoading\"\r\n            class=\"send-button\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\r\n              <path d=\"M2 21L23 12L2 3V10L17 12L2 14V21Z\" fill=\"currentColor\"/>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./chat.component.css']\r\n})\r\nexport class ChatComponent implements OnInit, AfterViewChecked {\r\n  @ViewChild('messagesContainer') private messagesContainer!: ElementRef;\r\n\r\n  messages: Message[] = [];\r\n  currentMessage = '';\r\n  isLoading = false;\r\n\r\n  constructor(private chatService: ChatService) {}\r\n\r\n  ngOnInit() {\r\n    this.messages.push({\r\n      content: \"Hello! I'm your Web Agent Assistant. I can search the web and provide you with information on any topic. What would you like to know?\",\r\n      isUser: false,\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  onKeyDown(event: KeyboardEvent) {\r\n    if (event.key === 'Enter' && !event.shiftKey) {\r\n      event.preventDefault();\r\n      this.sendMessage();\r\n    }\r\n  }\r\n\r\n  async sendMessage() {\r\n    if (!this.currentMessage.trim() || this.isLoading) return;\r\n\r\n    const userMessage: Message = {\r\n      content: this.currentMessage,\r\n      isUser: true,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    this.messages.push(userMessage);\r\n\r\n    const loadingMessage: Message = {\r\n      content: '',\r\n      isUser: false,\r\n      timestamp: new Date(),\r\n      isLoading: true\r\n    };\r\n\r\n    this.messages.push(loadingMessage);\r\n    this.isLoading = true;\r\n\r\n    const question = this.currentMessage;\r\n    this.currentMessage = '';\r\n\r\n    try {\r\n      const response = await this.chatService.sendMessage(question);\r\n\r\n      const index = this.messages.indexOf(loadingMessage);\r\n      if (index !== -1) {\r\n        this.messages[index] = {\r\n          content: response,\r\n          isUser: false,\r\n          timestamp: new Date(),\r\n          isLoading: false\r\n        };\r\n      }\r\n    } catch (error) {\r\n      const index = this.messages.indexOf(loadingMessage);\r\n      if (index !== -1) {\r\n        this.messages[index] = {\r\n          content: 'Sorry, I encountered an error while processing your request. Please try again.',\r\n          isUser: false,\r\n          timestamp: new Date(),\r\n          isLoading: false\r\n        };\r\n      }\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  private scrollToBottom(): void {\r\n    try {\r\n      this.messagesContainer.nativeElement.scrollTop = this.messagesContainer.nativeElement.scrollHeight;\r\n    } catch(err) {}\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}